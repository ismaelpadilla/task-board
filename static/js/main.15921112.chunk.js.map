{"version":3,"sources":["components/task/Task.js","components/board-column/BoardColumn.js","components/new-task/NewTask.js","components/dark-mode-toggle/DarkModeToggle.js","App.js","reportWebVitals.js","index.js"],"names":["Task","React","forwardRef","props","ref","useState","hover","setHover","draggingClassName","isDragging","toggleHover","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","className","title","description","BoardColumn","droppableId","String","id","droppableProvided","droppableProps","innerRef","tasks","map","task","i","index","draggableId","draggableProvided","draggableSnapshot","placeholder","NewTask","taskTitle","setTaskTitle","taskDescription","setTaskDescription","setShowModal","show","cancelTask","onClick","htmlFor","value","onChange","event","target","type","onNewTask","DarkModeToggle","toggleDarkMode","App","board","updateBoard","showModal","lastId","setLastId","darkModeEnabled","setDarkMode","oldFirstColumn","rest","newFirstColumn","JSON","parse","stringify","push","document","documentElement","classList","remove","add","onDragEnd","result","taskId","sourceBoardId","Number","source","sourceBoardIndex","destinationBoardId","destination","destinationIndex","console","log","newBoard","find","col","splice","movedTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.15921112.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Task = React.forwardRef((props, ref) => {\n  const [hover, setHover] = useState(false);\n\n  const draggingClassName = props.isDragging ? \"bg-blue-200 shadow-lg dark:bg-indigo-800\" : \"\";\n\n  const toggleHover = () => {\n    setHover(!hover);\n  }\n\n  return (\n    <div onMouseEnter={toggleHover} onMouseLeave={toggleHover} ref={ref} {...props.draggableProps} {...props.dragHandleProps} className={`dark:bg-gray-500 dark:hover:bg-indigo-900 bg-white hover:bg-blue-100 hover:shadow-lg rounded-lg p-3 mx-3 filter drop-shadow-sm ${draggingClassName}`}>\n      <h4 className=\"dark:text-gray-100 text-lg font-sans\">{props.title}</h4>\n      <p className={\"dark:text-gray-100 text-base text-justify font-sans \" + (hover || props.isDragging ? \"\" : \"truncate\")}>{props.description}</p>\n    </div>\n  );\n});\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"../task/Task\";\nimport {Draggable, Droppable} from \"react-beautiful-dnd\";\n\n\nconst BoardColumn = (props) => {\n  return (\n    <div className=\"bg-gray-100 dark:bg-gray-700 rounded-md\">\n      <h3 className=\"dark:text-gray-200 text-lg mt-2 font-sans font-bold text-center\">{props.title}</h3>\n      <Droppable droppableId={String(props.id)}>\n        {(droppableProvided) => (\n          <div className=\"flex flex-col h-full gap-4 py-3\" {...droppableProvided.droppableProps} ref={droppableProvided.innerRef}>\n            {props.tasks.map((task, i) =>\n              <Draggable key={task.id} index={i} draggableId={String(task.id)}>\n                {(draggableProvided, draggableSnapshot) => (\n                  <Task id={task.id} title={task.title} description={task.description} isDragging={draggableSnapshot.isDragging} ref={draggableProvided.innerRef} draggableProps={draggableProvided.draggableProps} dragHandleProps={draggableProvided.dragHandleProps} />\n                )}\n              </Draggable>\n            )}\n            {droppableProvided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </div>\n  );\n};\n\nexport default BoardColumn;\n","import React, {useState} from \"react\";\n\nconst NewTask = (props) => {\n  const [taskTitle, setTaskTitle] = useState(\"\");\n  const [taskDescription, setTaskDescription] = useState(\"\");\n\n  const setShowModal = (show) => {\n    props.setShowModal(show);\n  }\n\n  const addTask = () => {\n    props.onNewTask(taskTitle, taskDescription);\n    setShowModal(false);\n  }\n\n  const cancelTask = () => {\n    setShowModal(false);\n  }\n\n  const onTitleChange = (event) => {\n    setTaskTitle(event.target.value);\n  }\n\n  const onDescriptionChange = (event) => {\n    setTaskDescription(event.target.value);\n  }\n\n  return (\n    <>\n      <div onClick={cancelTask} className=\"block inset-0 fixed z-40 opacity-50 bg-black h-screen w-screen\"></div>\n      <div className=\"top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 absolute w-auto z-50 w-2/5 max-w-7xl\">\n        {/*content*/}\n        <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white dark:bg-gray-800 outline-none focus:outline-none\">\n          {/*header*/}\n          <div className=\"flex items-start justify-between p-5 border-b border-solid\">\n            <h3 className=\"text-xl font-semibold dark:text-gray-100\">\n              Add new task\n            </h3>\n            <button\n              className=\"p-1 ml-auto bg-transparent border-0 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\n              onClick={cancelTask}\n            >\n              <span className=\"bg-transparent text-gray-300 hover:text-gray-600 h-6 w-6 text-2xl block outline-none focus:outline-none\">\n                Ã—\n              </span>\n            </button>\n          </div>\n          {/*body*/}\n          <div className=\"relative px-6 py-3 flex-auto\">\n            <form className=\"flex flex-col\">\n              <div className=\"mb-3\">\n                <label htmlFor=\"title\" className=\"block uppercase dark:text-gray-100 text-blueGray-600 font-bold mb-2\"> Title </label>\n                <input value={taskTitle} onChange={onTitleChange} type=\"text\" id=\"title\" className=\"form-input border-0 px-3 py-3 bg-white dark:bg-gray-900 dark:placeholder-gray-400 dark:text-gray-100 rounded text-sm shadow w-full ease-linear transition-all duration-150\" placeholder=\"Task title\" />\n              </div>\n\n              <div>\n                <label htmlFor=\"description\" className=\"block uppercase text-blueGray-600 dark:text-gray-100 font-bold mb-2\"> Description </label>\n                <textarea value={taskDescription} onChange={onDescriptionChange} id=\"description\" className=\"form-input border-0 px-3 py-3 bg-white dark:bg-gray-900 dark:placeholder-gray-400 dark:text-gray-100 drounded text-sm shadow w-full ease-linear transition-all duration-150\" placeholder=\"Task description\" />\n              </div>\n            </form>\n          </div>\n          {/*footer*/}\n          <div className=\"flex items-center justify-end p-6\">\n            <button\n              className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm mr-1 mb-1 ease-linear transition-all duration-150\"\n              type=\"button\"\n              onClick={cancelTask}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"bg-green-500 text-white hover:bg-green-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n              type=\"button\"\n              onClick={addTask}\n            >\n              Add task\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default NewTask;\n","import React from 'react';\nimport './darkModeToggle.css';\n\nconst DarkModeToggle = (props) => {\n  const toggleDarkMode = () => props.toggleDarkMode();\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-center w-full\">\n        <label htmlFor=\"toggle\" className=\"flex items-center cursor-pointer\">\n          <div className=\"relative\">\n            <input type=\"checkbox\" onClick={toggleDarkMode} id=\"toggle\" className=\"sr-only\" />\n            <div className=\"block bg-gray-600 w-5 h-3 rounded-full\"></div>\n            <div className=\"dot absolute -left-1 top-0 bg-blue-500 w-3 h-3 rounded-full transition\"></div>\n          </div>\n          <div className=\"ml-3 font-sans text-base dark:text-gray-100\">\n            Dark mode\n          </div>\n        </label>\n      </div>\n    </div>\n  )\n}\n\nexport default DarkModeToggle;\n","import React, {useState} from 'react';\nimport BoardColumn from \"./components/board-column/BoardColumn\";\nimport {DragDropContext} from \"react-beautiful-dnd\";\nimport NewTask from './components/new-task/NewTask';\nimport DarkModeToggle from './components/dark-mode-toggle/DarkModeToggle'; \n\n\nfunction App() {\n  const initialBoard = [\n    {id: 1, title: \"To do\", tasks: [{id: 1, title: \"Sample task\", description: \"We can drag this around!\"}, {id: 2, title: \"Do stuff\", description: \"This is a task with a very long description. The text should be cut off at some point so that a sigle task doesn't take up the whole screen!\"}]},\n    {id: 2, title: \"In Progress\", tasks: []},\n    {id: 3, title: \"Done\", tasks: [{id: 3, title: \"Publish this website\", description: \"Publish using github pages\"}]},\n  ];\n\n  const [board, updateBoard] = useState(initialBoard);\n  const [showModal, setShowModal] = useState(false);\n  const [lastId, setLastId] = useState(3);\n  const [darkModeEnabled, setDarkMode] = useState(false);\n\n  const handleOnDragEnd = (result) => {\n    const taskId = result.draggableId;\n    const sourceBoardId = Number(result.source.droppableId);\n    const sourceBoardIndex = result.source.index;\n    const destinationBoardId = Number(result.destination?.droppableId);\n    const destinationIndex = result.destination?.index;\n    console.log(\"item\", taskId, \"dragged from\", sourceBoardId, \"to\", destinationBoardId, \"at index\", destinationIndex);\n\n    // destinationBoardId can be undefined if item was dragged into a non droppable zone\n    if (destinationBoardId) {\n      const newBoard = JSON.parse(JSON.stringify(board));\n      const sourceCol = newBoard.find(col => col.id === sourceBoardId);\n      const [movedTask] = sourceCol.tasks.splice(sourceBoardIndex, 1);\n\n      const destCol = newBoard.find(col => col.id === destinationBoardId);\n      destCol.tasks.splice(destinationIndex, 0, movedTask);\n\n      updateBoard(newBoard);\n    }\n  }\n\n  const onClickNewTask = () => {\n    setShowModal(true);\n  };\n\n  const onShowModal = (show) => {\n    setShowModal(show);\n  }\n\n  const onNewTask = (taskTitle, taskDescription) => {\n    const [oldFirstColumn, ...rest] = board;\n    const newFirstColumn = JSON.parse(JSON.stringify(oldFirstColumn));\n    newFirstColumn.tasks.push({id: lastId + 1, title: taskTitle, description: taskDescription});\n    setLastId(lastId + 1);\n    updateBoard([newFirstColumn, ...rest]);\n  }\n\n  const toggleDarkMode = () => {\n    if (!darkModeEnabled)\n      document.documentElement.classList.add('dark')\n    else\n      document.documentElement.classList.remove('dark')\n    setDarkMode(!darkModeEnabled);\n  }\n\n  return (\n    <div className=\"w-4/5 mx-auto\">\n      {showModal ? <NewTask onNewTask={onNewTask} showModal={showModal} setShowModal={onShowModal} /> : null}\n      <div className=\"flex justify-between my-4\">\n        <div onClick={onClickNewTask} className=\"cursor-pointer\">\n          <div className=\"rounded bg-green-500 text-white font-bold inline px-1 align-center align-middle\">+</div>\n          <span className=\"pl-1 align-middle dark:text-gray-100\">Add new task</span>\n        </div>\n        <DarkModeToggle toggleDarkMode={toggleDarkMode} />\n      </div>\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n        <div className=\"grid grid-cols-3 gap-x-10 mt-5\">\n          {board.map((col) => <BoardColumn id={col.id} key={col.id} title={col.title} tasks={col.tasks} />)}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}